{"version":3,"sources":["App.js","api/mockserver.js","index.js"],"names":["App","date","Date","year","nextBirthday","getTime","numberOfYears","difference","days","Math","ceil","currentYear","getFullYear","birthDate","getMonth","getDate","className","data","name","pets","animal","isVaccinated","environment","server","createServer","models","client","Model","seeds","routes","this","namespace","timing","get","schema","request","search","queryParams","filter","includes","post","JSON","parse","requestBody","forEach","c","p","success","makeServer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAmCeA,EAhCH,WAMV,IAJA,IAAMC,EAAO,IAAIC,KACbC,EAAO,KACPC,EAAe,IAAIF,KAAK,OAASC,GAE9BC,EAAaC,UAAYJ,EAAKI,WACnCF,IACAC,EAAe,IAAIF,KAAK,OAASC,GAGnC,IAIIG,EAJAC,EAAaH,EAAaC,UAAYJ,EAAKI,UAC3CG,EAAOC,KAAKC,KAAKH,EAAU,OACzBI,EAAcV,EAAKW,cACnBC,EAAY,KASlB,OALEP,EADEL,EAAKa,WAAa,GAES,IAApBb,EAAKa,YAAoBb,EAAKc,UAAY,EADnCJ,EAAcE,EAAY,EAGrBF,EAAcE,EAGnC,qBAAKG,UAAU,MAAf,SACyB,IAApBf,EAAKa,YAAuC,IAAnBb,EAAKc,UAC/B,yCAAaT,EAAb,wBACA,8CAAeE,EAAf,uE,QC5BJS,EAAO,CACT,CACEC,KAAM,oBACNC,KAAM,CACJ,CAAED,KAAM,QAASE,OAAQ,MAAOC,cAAc,GAC9C,CAAEH,KAAM,QAASE,OAAQ,MAAOC,cAAc,KAGlD,CACEH,KAAM,cACNC,KAAM,CACJ,CAAED,KAAM,QAASE,OAAQ,MAAOC,cAAc,KAGlD,CACEH,KAAM,eACNC,KAAM,CACJ,CAAED,KAAM,eAAWE,OAAQ,SAAUC,cAAc,OAKlD,WAAoD,IAAD,yDAAJ,GAAI,IAA7BC,mBAA6B,MAAf,OAAe,EACpDC,EAASC,YAAa,CACxBF,cACAG,OAAQ,CACNC,OAAQC,KAEVC,MALwB,SAKlBL,KACNM,OANwB,WAOtBC,KAAKC,UAAY,OACjBD,KAAKE,OAAS,IAEdF,KAAKG,IAAI,WAAW,SAACC,EAAQC,GAC3B,IAAMC,EAASD,EAAQE,YAAYD,OACnC,OAAOnB,EAAKqB,QAAO,SAAAZ,GAAM,OAAIA,EAAOR,KAAKqB,SAASH,SAGpDN,KAAKU,KAAK,SAAS,SAACN,EAAQC,GAAa,IAAD,EACTM,KAAKC,MAAMP,EAAQQ,aAA1CzB,EADgC,EAChCA,KAAMG,EAD0B,EAC1BA,aAMZ,OALAJ,EAAK2B,SAAQ,SAAAC,GACXA,EAAE1B,KAAKyB,SAAQ,SAAAE,GACTA,EAAE5B,OAASA,IAAM4B,EAAEzB,aAAeA,SAGnC,CAAE0B,SAAS,SCzC1BC,CAAW,CAAE1B,YAAa,gBAE1B2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dc520d67.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n\r\n  const date = new Date()\r\n  let year = 2021\r\n  let nextBirthday = new Date('7/9/' + year)\r\n\r\n  while (nextBirthday.getTime() < date.getTime()) {\r\n    year++\r\n    nextBirthday = new Date('7/9/' + year)\r\n  }\r\n\r\n  let difference = nextBirthday.getTime() - date.getTime()\r\n  let days = Math.ceil(difference / (1000 * 3600 * 24))\r\n  const currentYear = date.getFullYear()\r\n  const birthDate = 1971\r\n  let numberOfYears\r\n\r\n  if (date.getMonth() < 6) {\r\n    numberOfYears = currentYear - birthDate - 1\r\n  } else if (date.getMonth() === 6 && date.getDate() < 9) {\r\n    numberOfYears = currentYear - birthDate - 1\r\n  } else numberOfYears = currentYear - birthDate\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      { (date.getMonth() === 6 && date.getDate() === 9)\r\n      ? <h1>BOLDOG { numberOfYears }. SZÜLINAPOT!!!</h1>\r\n      : <h2>Már csak { days } nap van hátra a következő születésnapodig...</h2> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createServer, Model } from 'miragejs';\r\n\r\nlet data = [\r\n  {\r\n    name: 'Kovács Béla',\r\n    pets: [\r\n      { name: \"Bodri\", animal: \"dog\", isVaccinated: false },\r\n      { name: \"Cirmi\", animal: \"cat\", isVaccinated: false }\r\n    ]\r\n  },\r\n  {\r\n    name: 'Varga Lajos',\r\n    pets: [\r\n      { name: \"Frakk\", animal: \"dog\", isVaccinated: false }\r\n    ]\r\n  },\r\n  {\r\n    name: 'Nagy Béla',\r\n    pets: [\r\n      { name: \"Csőrike\", animal: \"pigeon\", isVaccinated: false }\r\n    ]\r\n  }\r\n]\r\n\r\nexport function makeServer({ environment = 'test' } = {}) {\r\n  let server = createServer({\r\n    environment,\r\n    models: {\r\n      client: Model,\r\n    },\r\n    seeds(server) { },\r\n    routes() {\r\n      this.namespace = '/api';\r\n      this.timing = 2000\r\n\r\n      this.get('clients', (schema, request) => {\r\n        const search = request.queryParams.search\r\n        return data.filter(client => client.name.includes(search))\r\n      });\r\n\r\n      this.post('/pets', (schema, request) => {\r\n        let { name, isVaccinated } = JSON.parse(request.requestBody);\r\n        data.forEach(c => {\r\n          c.pets.forEach(p => {\r\n            if (p.name === name) p.isVaccinated = isVaccinated\r\n          })\r\n        })\r\n        return { success: true }\r\n      });\r\n    },\r\n  });\r\n  return server;\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nimport { makeServer } from './api/mockserver'\r\nmakeServer({ environment: 'development' })\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}